#!/usr/bin/env node

/**
 * Script de Optimizaci√≥n de Im√°genes para HYDRA¬≤¬π
 * Optimiza autom√°ticamente las im√°genes para mejor performance web
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Directorio de im√°genes
const imagesDir = path.join(__dirname, "../public/assets/images");

// Obtener estad√≠sticas de archivos
function getFileStats() {
  console.log("üîç Analizando im√°genes en el proyecto...\n");

  const files = fs
    .readdirSync(imagesDir, { withFileTypes: true })
    .filter(
      (dirent) => dirent.isFile() && /\.(png|jpg|jpeg)$/i.test(dirent.name)
    )
    .map((dirent) => {
      const filePath = path.join(imagesDir, dirent.name);
      const stats = fs.statSync(filePath);
      return {
        name: dirent.name,
        size: stats.size,
        sizeMB: (stats.size / (1024 * 1024)).toFixed(2),
      };
    })
    .sort((a, b) => b.size - a.size);

  console.log("üìä IM√ÅGENES M√ÅS PESADAS (ordenadas por tama√±o):");
  console.log("=" * 60);

  files.forEach((file, index) => {
    const status =
      file.size > 1000000
        ? "üî¥ CR√çTICO"
        : file.size > 500000
        ? "üü° ALTO"
        : "üü¢ OK";
    console.log(`${index + 1}. ${file.name} - ${file.sizeMB}MB ${status}`);
  });

  const totalSize = files.reduce((acc, file) => acc + file.size, 0);
  console.log(`\nüìà TAMA√ëO TOTAL: ${(totalSize / (1024 * 1024)).toFixed(2)}MB`);

  return files;
}

// Recomendaciones de optimizaci√≥n
function getOptimizationRecommendations() {
  console.log("\nüõ†Ô∏è  RECOMENDACIONES DE OPTIMIZACI√ìN:\n");

  const recommendations = [
    {
      category: "1. COMPRESI√ìN DE IM√ÅGENES",
      actions: [
        "‚Ä¢ Usar herramientas como TinyPNG, ImageOptim o Sharp",
        "‚Ä¢ Comprimir PNG con p√©rdida del 10-20%",
        "‚Ä¢ Convertir PNG decorativas a JPEG cuando sea posible",
        "‚Ä¢ Objetivo: Reducir cada imagen a menos de 500KB",
      ],
    },
    {
      category: "2. FORMATOS MODERNOS",
      actions: [
        "‚Ä¢ Convertir a WebP (30-50% menor tama√±o)",
        "‚Ä¢ Usar AVIF para navegadores compatibles",
        "‚Ä¢ Implementar <picture> con fallbacks",
      ],
    },
    {
      category: "3. RESPONSIVE IMAGES",
      actions: [
        "‚Ä¢ Crear diferentes tama√±os (mobile, tablet, desktop)",
        "‚Ä¢ Usar srcset para cargar el tama√±o apropiado",
        "‚Ä¢ cube_2.png: crear versiones 200px, 400px, 800px",
      ],
    },
    {
      category: "4. LAZY LOADING",
      actions: [
        "‚Ä¢ ‚úÖ Ya implementado en Hero y Features",
        "‚Ä¢ Aplicar a todas las im√°genes no cr√≠ticas",
        "‚Ä¢ Usar intersection observer para mejor control",
      ],
    },
    {
      category: "5. PRELOADING CR√çTICO",
      actions: [
        "‚Ä¢ Precargar solo la imagen principal del Hero",
        '‚Ä¢ Usar <link rel="preload"> para LCP cr√≠tico',
        "‚Ä¢ Evitar precargar m√∫ltiples im√°genes",
      ],
    },
  ];

  recommendations.forEach((rec) => {
    console.log(`${rec.category}:`);
    rec.actions.forEach((action) => console.log(`  ${action}`));
    console.log("");
  });
}

// Generar comandos de optimizaci√≥n
function generateOptimizationCommands(files) {
  console.log("üíª COMANDOS DE OPTIMIZACI√ìN AUTOM√ÅTICA:\n");

  const heavyFiles = files.filter((file) => file.size > 500000);

  console.log("# Instalar herramientas (una vez):");
  console.log("npm install -g @squoosh/cli sharp-cli");
  console.log("");

  console.log("# Optimizar archivos pesados:");
  heavyFiles.forEach((file) => {
    console.log(
      `npx @squoosh/cli --webp '{"quality":85}' --avif '{"quality":50}' public/assets/images/${file.name}`
    );
  });

  console.log("\n# O usar Sharp para batch processing:");
  console.log("node scripts/sharp-optimize.js");
}

// Funci√≥n principal
function main() {
  console.log("üöÄ HYDRA¬≤¬π - An√°lisis de Optimizaci√≥n de Im√°genes\n");

  try {
    const files = getFileStats();
    getOptimizationRecommendations();
    generateOptimizationCommands(files);

    console.log("\n‚ú® SIGUIENTE PASO:");
    console.log("1. Ejecutar los comandos de optimizaci√≥n");
    console.log("2. Implementar formatos WebP/AVIF");
    console.log("3. Crear responsive images");
    console.log("4. Medir performance nuevamente");
  } catch (error) {
    console.error("‚ùå Error al analizar im√°genes:", error.message);
  }
}

// Ejecutar script
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { getFileStats, getOptimizationRecommendations };
