---
// ViewportAnimator.astro - Intersection Observer based animations for smooth section transitions
export interface Props {
  animation?: 'fade-in' | 'slide-up' | 'stagger';
  delay?: number;
  duration?: number;
  threshold?: number;
  className?: string;
  once?: boolean;
}

const {
  animation = 'fade-in',
  delay = 0,
  duration = 400,
  threshold = 0.1,
  className = '',
  once = true
} = Astro.props;

const animationClass = `viewport-animate-${animation}`;
const uniqueId = `viewport-${Math.random().toString(36).substring(2, 9)}`;
---

<div
  class={`viewport-observer ${animationClass} ${className}`}
  data-animation={animation}
  data-delay={delay}
  data-duration={duration}
  data-threshold={threshold}
  data-once={once}
  data-id={uniqueId}
>
  <slot />
</div>

<script>
  // Enhanced Intersection Observer for smooth section animations
  class ViewportAnimator {
    private observer: IntersectionObserver;
    private elements: Map<Element, AnimationConfig> = new Map();

    constructor() {
      this.observer = new IntersectionObserver(
        this.handleIntersection.bind(this),
        {
          threshold: 0.1,
          rootMargin: '0px 0px -5% 0px'
        }
      );
      this.init();
    }

    private init() {
      // Initialize all viewport observer elements
      const elements = document.querySelectorAll('.viewport-observer');
      elements.forEach(element => this.observeElement(element));
    }

    private observeElement(element: Element) {
      const config: AnimationConfig = {
        animation: element.getAttribute('data-animation') || 'fade-in',
        delay: parseInt(element.getAttribute('data-delay') || '0'),
        duration: parseInt(element.getAttribute('data-duration') || '600'),
        threshold: parseFloat(element.getAttribute('data-threshold') || '0.1'),
        once: element.getAttribute('data-once') === 'true'
      };

      this.elements.set(element, config);
      this.observer.observe(element);

      // Set initial state
      this.setInitialState(element, config);
    }

    private setInitialState(element: Element, config: AnimationConfig) {
      const htmlElement = element as HTMLElement;

      // Respect prefers-reduced-motion
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      if (prefersReducedMotion) {
        htmlElement.style.opacity = '1';
        htmlElement.style.transform = 'none';
        htmlElement.style.filter = 'none';
        return;
      }

      // Simple and fast transition
      htmlElement.style.transition = `opacity 200ms ease, transform 200ms ease`;
      htmlElement.style.transitionDelay = `${config.delay * 0.3}ms`;

      // Simple and fast animation states
      switch (config.animation) {
        case 'fade-in':
          htmlElement.style.opacity = '0';
          break;
        case 'slide-up':
          htmlElement.style.opacity = '0';
          htmlElement.style.transform = 'translateY(20px)';
          break;
        case 'stagger':
          htmlElement.style.opacity = '0';
          htmlElement.style.transform = 'translateY(15px)';
          this.setupStaggerAnimation(element);
          break;
      }
    }

    private setupStaggerAnimation(element: Element) {
      const children = element.children;
      Array.from(children).slice(0, 6).forEach((child, index) => { // Limit to 6 children for performance
        const htmlChild = child as HTMLElement;
        htmlChild.style.opacity = '0';
        htmlChild.style.transform = 'translateY(10px)';
        htmlChild.style.transition = 'opacity 150ms ease, transform 150ms ease';
        htmlChild.style.transitionDelay = `${index * 50}ms`;
      });
    }

    private handleIntersection(entries: IntersectionObserverEntry[]) {
      entries.forEach(entry => {
        const config = this.elements.get(entry.target);
        if (!config) return;

        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        if (prefersReducedMotion) return;

        if (entry.isIntersecting && entry.intersectionRatio >= config.threshold) {
          this.animateIn(entry.target, config);
          
          if (config.once) {
            this.observer.unobserve(entry.target);
            this.elements.delete(entry.target);
          }
        } else if (!config.once && !entry.isIntersecting) {
          this.animateOut(entry.target, config);
        }
      });
    }

    private animateIn(element: Element, config: AnimationConfig) {
      const htmlElement = element as HTMLElement;

      // Fast animation trigger
      requestAnimationFrame(() => {
        htmlElement.style.opacity = '1';
        htmlElement.style.transform = 'none';

        if (config.animation === 'stagger') {
          const children = element.children;
          Array.from(children).forEach((child) => {
            const htmlChild = child as HTMLElement;
            htmlChild.style.opacity = '1';
            htmlChild.style.transform = 'none';
          });
        }

        // Add animated class
        htmlElement.classList.add('viewport-animated');

        // Quick cleanup
        setTimeout(() => {
          htmlElement.style.transition = '';
          htmlElement.style.transitionDelay = '';
        }, 250);
      });
    }

    private animateOut(element: Element, config: AnimationConfig) {
      const htmlElement = element as HTMLElement;
      this.setInitialState(element, config);
      htmlElement.classList.remove('viewport-animated');
    }

    public refresh() {
      // Re-initialize all elements (useful after page transitions)
      this.elements.clear();
      this.observer.disconnect();
      this.init();
    }

    public destroy() {
      this.observer.disconnect();
      this.elements.clear();
    }
  }

  interface AnimationConfig {
    animation: string;
    delay: number;
    duration: number;
    threshold: number;
    once: boolean;
  }

  // Global instance
  let viewportAnimator: ViewportAnimator;

  function initViewportAnimator() {
    if (viewportAnimator) {
      viewportAnimator.destroy();
    }
    viewportAnimator = new ViewportAnimator();
  }

  // Initialize on page load and after transitions
  document.addEventListener('DOMContentLoaded', initViewportAnimator);
  document.addEventListener('astro:page-load', initViewportAnimator);
  
  // Refresh after DOM changes
  document.addEventListener('astro:after-swap', () => {
    // Small delay to ensure DOM is ready
    setTimeout(() => {
      if (viewportAnimator) {
        viewportAnimator.refresh();
      }
    }, 100);
  });
</script>

<style>
  /* ========================================
     ULTRA-FAST VIEWPORT ANIMATIONS
  ======================================== */

  /* Minimal base styles */
  .viewport-observer {
    opacity: 0;
  }

  /* Simple animation states */
  .viewport-animated {
    opacity: 1 !important;
    transform: none !important;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .viewport-observer,
    .viewport-observer * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      transform: none !important;
    }
  }
</style>
