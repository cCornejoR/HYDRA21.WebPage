---
import { getCollection } from 'astro:content';

// Get all documentation entries and organize by category
const allDocs = await getCollection('docs');

interface DocEntry {
  data: {
    category: string;
    order?: number;
    title: string;
    sidebar?: {
      label: string;
    };
  };
  slug: string;
  [key: string]: any;
}

interface DocsByCategory {
  [category: string]: DocEntry[];
}

const docsByCategory = allDocs.reduce((acc: DocsByCategory, doc: DocEntry) => {
  const category = doc.data.category;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(doc);
  return acc;
}, {});

// Sort docs within each category by order
Object.keys(docsByCategory).forEach(category => {
  docsByCategory[category].sort((a: DocEntry, b: DocEntry) => (a.data.order || 999) - (b.data.order || 999));
});

// Category configuration
type CategoryConfig = {
  title: string;
  icon: string;
  order: number;
};

const categoryConfig: Record<string, CategoryConfig> = {
  'getting-started': {
    title: 'Primeros Pasos',
    icon: 'rocket',
    order: 1
  },
  'guides': {
    title: 'Guías de Usuario',
    icon: 'book',
    order: 2
  },
  'api': {
    title: 'Referencia API',
    icon: 'code',
    order: 3
  },
  'troubleshooting': {
    title: 'Solución de Problemas',
    icon: 'wrench',
    order: 4
  },
  'faq': {
    title: 'Preguntas Frecuentes',
    icon: 'help',
    order: 5
  }
};

// Sort categories by order
const sortedCategories = Object.keys(docsByCategory).sort((a, b) =>
  (categoryConfig[a]?.order || 999) - (categoryConfig[b]?.order || 999)
);

// Get current page
const currentPath = Astro.url.pathname;
---

<nav class="docs-sidebar bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg border border-gray-200 dark:border-gray-700">

  <!-- Search -->
  <div class="mb-6">
    <div class="relative">
      <input
        type="search"
        id="docs-search"
        placeholder="Buscar en la documentación..."
        class="w-full px-4 py-2 pl-10 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
      />
      <svg class="absolute left-3 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
  </div>

  <!-- Navigation -->
  <div class="space-y-6">
    {sortedCategories.map(categoryKey => {
      const category = categoryConfig[categoryKey];
      const docs = docsByCategory[categoryKey];

      return (
        <div class="category-section">
          <h3 class="flex items-center text-sm font-semibold text-gray-900 dark:text-white mb-3">
            <svg class="w-4 h-4 mr-2 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              {category.icon === 'rocket' && (
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
              )}
              {category.icon === 'book' && (
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
              )}
              {category.icon === 'code' && (
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
              )}
              {category.icon === 'wrench' && (
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
              )}
              {category.icon === 'help' && (
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              )}
            </svg>
            {category.title}
          </h3>

          <ul class="space-y-1">
            {docs.map((doc: DocEntry) => {
              const isActive = currentPath === `/docs/${doc.slug}`;
              return (
                <li>
                  <a
                    href={`/docs/${doc.slug}`}
                    class={`block px-3 py-2 text-sm rounded-lg transition-colors ${
                      isActive
                        ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 font-medium'
                        : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700'
                    }`}
                  >
                    {doc.data.sidebar?.label || doc.data.title}
                  </a>
                </li>
              );
            })}
          </ul>
        </div>
      );
    })}
  </div>

  <!-- Mobile Toggle -->
  <button
    id="mobile-sidebar-toggle"
    class="lg:hidden fixed bottom-6 right-6 z-50 bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-full shadow-lg transition-colors"
    aria-label="Toggle documentation sidebar"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>

</nav>

<style>
  .docs-sidebar {
    backdrop-filter: blur(10px);
  }

  @media (max-width: 1023px) {
    .docs-sidebar {
      position: fixed;
      top: 0;
      left: 0;
      bottom: 0;
      width: 280px;
      z-index: 40;
      transform: translateX(-100%);
      transition: transform 0.3s ease-in-out;
      overflow-y: auto;
    }

    .docs-sidebar.open {
      transform: translateX(0);
    }
  }
</style>

<script>
  // Mobile sidebar toggle
  document.addEventListener('astro:page-load', () => {
    const toggle = document.getElementById('mobile-sidebar-toggle');
    const sidebar = document.querySelector('.docs-sidebar');

    if (toggle && sidebar) {
      toggle.addEventListener('click', () => {
        sidebar.classList.toggle('open');
      });

      // Close sidebar when clicking outside
      document.addEventListener('click', (e) => {
        if (!sidebar.contains(e.target as Node) && !toggle.contains(e.target as Node)) {
          sidebar.classList.remove('open');
        }
      });
    }
  });
</script>
