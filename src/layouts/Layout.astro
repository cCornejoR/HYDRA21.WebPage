---
import { ClientRouter } from "astro:transitions";
import BackToTop from "../components/BackToTop.astro";
import "../styles/buttons.css";

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "HYDRA²¹ - Software de Ingeniería Hidráulica" } = Astro.props;
---

<!DOCTYPE html>
<html lang="es" class="h-full" transition:name="root">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/pipe_logo.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <!-- Enhanced View Transitions with optimized configuration -->
    <ClientRouter fallback="animate" />

    <!-- Preload only essential resources for welcome modal -->
    <link rel="preload" href="/assets/images/robot.png" as="image" />
    <link rel="preload" href="/assets/images/logo_empresa.png" as="image" />
    <link rel="preload" href="/assets/images/Software-main.png" as="image" />
    <!-- Preload shared background to reduce initial flash -->
    <link rel="preload" href="/assets/images/fondo_3_dark.png" as="image" />
  </head>
  <body class="h-full font-body antialiased theme-bg theme-text min-w-[300px] flex flex-col" style="min-height: 100vh; min-height: 100svh;">
    <div class="flex-1 relative min-w-[300px]" style="min-height: 100vh; min-height: 100svh;">
      <!-- Optimized Background - Static grid pattern -->
      <div class="absolute inset-0 diagonal-grid opacity-30"></div>

      <!-- Simplified decorative elements - No animations -->
      <!-- Top-left decorative element -->
      <div class="absolute top-6 left-6 sm:top-10 sm:left-10 md:top-20 md:left-20 w-32 h-32 sm:w-48 sm:h-48 md:w-72 md:h-72 lg:w-80 lg:h-80 xl:w-96 xl:h-96 bg-blue-600/4 dark:bg-blue-600/3 rounded-full blur-2xl"></div>

      <!-- Bottom-right decorative element -->
      <div class="absolute bottom-6 right-6 sm:bottom-10 sm:right-10 md:bottom-20 md:right-20 w-40 h-40 sm:w-64 sm:h-64 md:w-96 md:h-96 lg:w-[28rem] lg:h-[28rem] xl:w-[32rem] xl:h-[32rem] bg-sky-500/4 dark:bg-sky-500/3 rounded-full blur-2xl"></div>

      <!-- Central decorative element -->
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 sm:w-80 sm:h-80 md:w-[500px] md:h-[500px] lg:w-[600px] lg:h-[600px] xl:w-[700px] xl:h-[700px] 2xl:w-[800px] 2xl:h-[800px] bg-blue-400/3 dark:bg-blue-400/2 rounded-full blur-2xl"></div>

      <!-- Top-right accent element -->
      <div class="absolute top-1/4 right-1/4 w-24 h-24 sm:w-32 sm:h-32 md:w-48 md:h-48 lg:w-56 lg:h-56 xl:w-64 xl:h-64 bg-indigo-500/3 dark:bg-indigo-500/2 rounded-full blur-xl"></div>

      <main class="relative z-10 flex-1" transition:name="main-content">
        <slot />
      </main>
    </div>

    <!-- Enhanced View Transitions Loading Elements -->
    <div class="page-loading-bar" id="page-loading-bar"></div>
    <div class="page-transition-overlay" id="page-transition-overlay"></div>

    <!-- Back to Top Button -->
    <BackToTop />

    <!-- Theme Toggle Script con soporte para transiciones -->
    <script is:inline>
      // Función para aplicar el tema (requerido para transiciones)
      function applyTheme() {
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const theme = savedTheme || (prefersDark ? 'dark' : 'light');
        
        document.documentElement.classList.remove('light', 'dark');
        document.documentElement.classList.add(theme);
        
        return theme;
      }

      // Theme toggle functionality
      function initTheme() {
        const theme = applyTheme();
        localStorage.setItem('theme', theme);
      }

      function toggleTheme() {
        const html = document.documentElement;
        const currentTheme = html.classList.contains('dark') ? 'dark' : 'light';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        // Remove both classes and add the new one
        html.classList.remove('light', 'dark');
        html.classList.add(newTheme);
        
        // Save preference
        localStorage.setItem('theme', newTheme);
        
        // Trigger a custom event for other components to listen to
        window.dispatchEvent(new CustomEvent('themeChanged', { 
          detail: { theme: newTheme } 
        }));
      }

      // Initialize theme immediately to prevent flash
      applyTheme();

      // Aplicar tema después de cada transición de página
      document.addEventListener("astro:after-swap", applyTheme);
      
      // Initialize on load and after navigation
      document.addEventListener('DOMContentLoaded', initTheme);
      document.addEventListener("astro:page-load", initTheme);

      // Make toggleTheme available globally
      window.toggleTheme = toggleTheme;
    </script>

    <!-- Enhanced View Transitions Script -->
    <script is:inline>
      // Enhanced View Transitions with loading states and performance optimization
      class EnhancedViewTransitions {
        constructor() {
          this.loadingBar = document.getElementById('page-loading-bar');
          this.overlay = document.getElementById('page-transition-overlay');
          this.isTransitioning = false;
          this.init();
        }

        init() {
          // Listen for view transition events
          document.addEventListener('astro:before-preparation', this.handleBeforePreparation.bind(this));
          document.addEventListener('astro:after-preparation', this.handleAfterPreparation.bind(this));
          document.addEventListener('astro:before-swap', this.handleBeforeSwap.bind(this));
          document.addEventListener('astro:after-swap', this.handleAfterSwap.bind(this));
          document.addEventListener('astro:page-load', this.handlePageLoad.bind(this));

          // Preload critical resources
          this.preloadCriticalResources();
        }

        handleBeforePreparation(event) {
          if (this.isTransitioning) return;
          this.isTransitioning = true;

          // Show loading indicators
          this.showLoadingState();

          // Add custom loading logic
          const originalLoader = event.loader;
          event.loader = async function() {
            try {
              await originalLoader();
            } catch (error) {
              console.warn('Page loading error:', error);
              // Fallback to regular navigation
              window.location.href = event.to.href;
            }
          };
        }

        handleAfterPreparation() {
          // Preparation complete, ready for swap
          this.updateLoadingProgress(70);
        }

        handleBeforeSwap(event) {
          // Ensure theme consistency
          this.preserveThemeState(event.newDocument);
          this.updateLoadingProgress(90);
        }

        handleAfterSwap() {
          // DOM has been swapped
          this.updateLoadingProgress(95);

          // Re-initialize any necessary scripts
          this.reinitializeScripts();
        }

        handlePageLoad() {
          // Page fully loaded
          this.hideLoadingState();
          this.isTransitioning = false;

          // Trigger custom page load event for other scripts
          window.dispatchEvent(new CustomEvent('enhanced-page-load'));
        }

        showLoadingState() {
          if (this.loadingBar) {
            this.loadingBar.classList.add('active');
          }

          // Respect reduced motion
          if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
            if (this.overlay) {
              this.overlay.classList.add('active');

              // Add elegant entrance animation
              setTimeout(() => {
                this.overlay.style.transform = 'scale(1.02)';
                this.overlay.style.filter = 'blur(0px)';
              }, 100);
            }
          }

          // Add page morphing effect
          this.addPageMorphingEffect();
        }

        addPageMorphingEffect() {
          // Simplified page transition without complex transforms
          const currentPage = document.body;
          if (currentPage) {
            currentPage.style.opacity = '0.8';
          }
        }

        hideLoadingState() {
          if (this.loadingBar) {
            this.loadingBar.classList.remove('active');
          }
          if (this.overlay) {
            this.overlay.classList.remove('active');
            // Reset overlay styles
            this.overlay.style.transform = '';
            this.overlay.style.filter = '';
          }

          // Restore page state with elegant animation
          this.restorePageState();
        }

        restorePageState() {
          const currentPage = document.body;
          if (currentPage) {
            // Fast restoration with dramatic effect
            setTimeout(() => {
              currentPage.style.transform = 'scale(1.02) rotateX(-1deg) rotateY(1deg)';
              currentPage.style.filter = 'blur(0px) brightness(1.1) saturate(1.1)';
              currentPage.style.opacity = '1';

              // Settle to normal state
              setTimeout(() => {
                currentPage.style.transform = 'scale(1) rotateX(0deg) rotateY(0deg)';
                currentPage.style.filter = 'blur(0px) brightness(1) saturate(1)';

                // Clean up after final animation
                setTimeout(() => {
                  currentPage.style.transition = '';
                  currentPage.style.transform = '';
                  currentPage.style.filter = '';
                  currentPage.style.opacity = '';
                }, 300);
              }, 200);
            }, 30);
          }
        }

        updateLoadingProgress(percentage) {
          // Update loading progress if needed
          if (this.loadingBar) {
            this.loadingBar.style.setProperty('--progress', `${percentage}%`);
          }
        }

        preserveThemeState(newDocument) {
          // Preserve theme state across transitions
          const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
          if (currentTheme === 'dark') {
            newDocument.documentElement.classList.add('dark');
          } else {
            newDocument.documentElement.classList.remove('dark');
          }
        }

        reinitializeScripts() {
          // Re-trigger initialization for components that need it
          setTimeout(() => {
            // Trigger viewport animations refresh
            if (window.viewportAnimator) {
              window.viewportAnimator.refresh();
            }
          }, 100);
        }

        preloadCriticalResources() {
          // Preload critical images and resources
          const criticalImages = [
            '/assets/images/cube_2.png',
            '/assets/images/torus_2.png',
            '/assets/images/icosahedron_2.png'
          ];

          criticalImages.forEach(src => {
            const link = document.createElement('link');
            link.rel = 'preload';
            link.as = 'image';
            link.href = src;
            document.head.appendChild(link);
          });
        }
      }

      // Initialize enhanced view transitions
      let enhancedTransitions;

      function initEnhancedTransitions() {
        if (enhancedTransitions) return;
        enhancedTransitions = new EnhancedViewTransitions();
      }

      // Initialize on DOM ready and after page loads
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initEnhancedTransitions);
      } else {
        initEnhancedTransitions();
      }

      document.addEventListener('astro:page-load', initEnhancedTransitions);
    </script>

    <!-- Auto Performance Optimization Script -->
    <script is:inline>
      // Auto-initialize performance optimizations
      document.addEventListener('DOMContentLoaded', () => {
        // Auto-detect low-power devices and apply optimizations
        const isLowPowerDevice = navigator.hardwareConcurrency < 4 || 
                                 /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent) ||
                                 window.innerWidth < 768;

        const isSlowConnection = navigator.connection && (
          navigator.connection.effectiveType === 'slow-2g' ||
          navigator.connection.effectiveType === '2g' ||
          navigator.connection.effectiveType === '3g'
        );

        if (isLowPowerDevice || isSlowConnection) {
          // Apply instant performance optimizations
          const optimizationStyle = document.createElement('style');
          optimizationStyle.textContent = `
            /* Instant performance optimizations */
            .diagonal-grid { display: none !important; }
            .animate-pulse-slow, .animate-float-slow, .animate-float-gentle { animation: none !important; }
            .viewport-observer { opacity: 1 !important; transform: none !important; transition: none !important; }
            [class*="blur-"] { filter: none !important; }
            [class*="backdrop-blur"] { backdrop-filter: none !important; }
            [class*="transition-"] { transition: none !important; }
            * { will-change: auto !important; }
            ::view-transition-old(*), ::view-transition-new(*) { animation-duration: 0.05s !important; }
          `;
          document.head.appendChild(optimizationStyle);
          console.log('🚀 Optimizaciones de rendimiento aplicadas automáticamente');
        }

        // Fast image loading optimization
        const images = document.querySelectorAll('img');
        images.forEach(img => {
          img.loading = 'lazy';
          img.decoding = 'async';
        });
      });
    </script>
  </body>
</html>

<style>
  html {
    scroll-behavior: smooth;
  }

  /* Enhanced mobile optimizations following Hero patterns */
  @media (max-width: 768px) {
    body {
      font-size: 14px;
      line-height: 1.5;
    }

    /* Adjust decorative elements for mobile */
    .absolute.top-6 {
      top: 1rem !important;
      left: 1rem !important;
    }

    .absolute.bottom-6 {
      bottom: 1rem !important;
      right: 1rem !important;
    }
  }

  /* Mobile optimizations for screens ≤640px */
  @media (max-width: 640px) {
    /* Reduce decorative element sizes for better performance */
    .absolute.top-6 div,
    .absolute.bottom-6 div,
    .absolute.top-1\\/2 div,
    .absolute.top-1\\/4 div {
      animation-duration: 20s !important;
    }

    /* Simplify blur effects on mobile */
    .blur-3xl {
      backdrop-filter: blur(8px) !important;
    }

    .blur-2xl {
      backdrop-filter: blur(4px) !important;
    }
  }

  /* Enhanced optimizations for screens ≤499px following Hero pattern */
  @media (max-width: 499px) {
    /* Reduce decorative element opacity for better text contrast */
    .bg-blue-600\\/8,
    .bg-sky-500\\/8,
    .bg-blue-400\\/6,
    .bg-indigo-500\\/6 {
      opacity: 0.4 !important;
    }

    /* Ensure proper viewport height */
    body, html {
      min-height: 100vh !important;
      min-height: 100svh !important;
    }
  }

  /* Specific optimizations for screens <400px following Hero pattern */
  @media (max-width: 400px) {
    /* Further reduce decorative elements for very small screens */
    .absolute.top-6 {
      width: 4rem !important;
      height: 4rem !important;
    }

    .absolute.bottom-6 {
      width: 5rem !important;
      height: 5rem !important;
    }

    .absolute.top-1\\/2 {
      width: 8rem !important;
      height: 8rem !important;
    }

    .absolute.top-1\\/4 {
      width: 3rem !important;
      height: 3rem !important;
    }

    /* Reduce opacity further for better text readability */
    .bg-blue-600\\/8,
    .bg-sky-500\\/8,
    .bg-blue-400\\/6,
    .bg-indigo-500\\/6 {
      opacity: 0.2 !important;
    }

    /* Simplify animations for performance */
    .animate-pulse-slow,
    .animate-float-slow {
      animation-duration: 25s !important;
    }
  }

  /* Minimum width enforcement */
  body, html {
    min-width: 300px !important;
  }

  /* Smooth theme transitions */
  html {
    transition: background-color 0.3s ease;
  }

  body {
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  /* Ensure proper theme application */
  html {
    background-color: var(--color-background);
  }

  body {
    background-color: var(--color-background) !important;
    color: var(--color-foreground) !important;
  }

  /* ========================================
     SIMPLE VIEW TRANSITIONS
  ======================================== */

  /* Simple fade transitions */
  @keyframes simple-fade-in {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes elegant-fade-out {
    0% {
      opacity: 1;
      transform: translateY(0) scale(1);
      filter: blur(0) brightness(1);
    }
    50% {
      opacity: 0.7;
      transform: translateY(-10px) scale(1.01);
      filter: blur(2px) brightness(1.1);
    }
    100% {
      opacity: 0;
      transform: translateY(-20px) scale(1.02);
      filter: blur(8px) brightness(1.2);
    }
  }

  @keyframes premium-slide-in {
    0% {
      opacity: 0;
      transform: translateX(60px) rotateY(15deg) scale(0.95);
      filter: blur(10px) saturate(0.8);
    }
    30% {
      opacity: 0.4;
      transform: translateX(30px) rotateY(8deg) scale(0.97);
      filter: blur(6px) saturate(0.9);
    }
    70% {
      opacity: 0.8;
      transform: translateX(10px) rotateY(3deg) scale(0.99);
      filter: blur(2px) saturate(1);
    }
    100% {
      opacity: 1;
      transform: translateX(0) rotateY(0deg) scale(1);
      filter: blur(0) saturate(1);
    }
  }

  @keyframes premium-slide-out {
    0% {
      opacity: 1;
      transform: translateX(0) rotateY(0deg) scale(1);
      filter: blur(0) saturate(1);
    }
    30% {
      opacity: 0.8;
      transform: translateX(-10px) rotateY(-3deg) scale(1.01);
      filter: blur(2px) saturate(1.1);
    }
    70% {
      opacity: 0.4;
      transform: translateX(-30px) rotateY(-8deg) scale(1.03);
      filter: blur(6px) saturate(1.2);
    }
    100% {
      opacity: 0;
      transform: translateX(-60px) rotateY(-15deg) scale(1.05);
      filter: blur(10px) saturate(1.3);
    }
  }

  @keyframes simple-scale-in {
    0% {
      opacity: 0;
      transform: scale(0.95);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes simple-scale-out {
    0% {
      opacity: 1;
      transform: scale(1);
    }
    100% {
      opacity: 0;
      transform: scale(1.05);
    }
  }

  /* SIMPLE PAGE TRANSITION ANIMATIONS */
  ::view-transition-old(root) {
    animation: simple-scale-out 0.3s ease;
  }

  ::view-transition-new(root) {
    animation: simple-scale-in 0.3s ease;
  }

  /* Simple Loading Bar */
  [data-astro-transition]::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: #3b82f6;
    transform: translateX(-100%);
    animation: simple-loading 0.8s ease infinite;
    z-index: 9999;
    pointer-events: none;
  }

  @keyframes simple-loading {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }





  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    ::view-transition-old(*),
    ::view-transition-new(*) {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
    }

    [data-astro-transition]::before {
      display: none !important;
    }
  }

  /* Optimized static elements - removed heavy animations */

  /* Optimized static grid pattern */
  .diagonal-grid {
    background-image:
      linear-gradient(45deg, rgba(59, 130, 246, 0.02) 1px, transparent 1px),
      linear-gradient(-45deg, rgba(6, 182, 212, 0.015) 1px, transparent 1px);
    background-size: 20px 20px;
    background-position: 0 0, 10px 10px;
  }

  /* Mobile viewport fixes */
  @media (max-width: 768px) {
    html, body {
      min-height: 100vh !important;
      min-height: 100svh !important;
      height: auto;
      overflow-x: hidden;
    }

    body > div {
      min-height: 100vh !important;
      min-height: 100svh !important;
    }

    /* Optimize grid pattern for mobile */
    .diagonal-grid {
      background-size: 15px 15px;
      background-position: 0 0, 7.5px 7.5px;
    }

    @keyframes grid-move {
      0% {
        transform: translate(0, 0);
      }
      100% {
        transform: translate(15px, 15px);
      }
    }
  }

  /* Further mobile optimizations for <400px */
  @media (max-width: 400px) {
    .diagonal-grid {
      background-size: 12px 12px;
      background-position: 0 0, 6px 6px;
      opacity: 0.3 !important;
    }

    @keyframes grid-move {
      0% {
        transform: translate(0, 0);
      }
      100% {
        transform: translate(12px, 12px);
      }
    }
  }
</style>